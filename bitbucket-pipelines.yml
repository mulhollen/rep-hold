pipelines:
  branches:
    development:
    - step:
        image: node:10.15.0
        name: build dependencies and test
        caches:
          - node
        script: # Modify the commands below to build your repository.
          - npm install
          #- npm test --passWithNoTests
    - step:
        image: atlassian/pipelines-awscli:latest
        name: build and publish docker image.
        services:
          - docker # enable Docker for your repository
        script: # Modify the commands below to build your repository.
            # aws login
            - eval $(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)
            # docker
            - export BUILD_ID=$BITBUCKET_BRANCH_$BITBUCKET_COMMIT_$BITBUCKET_BUILD_NUMBER
            - docker build -t ${AWS_REGISTRY_URL}:$BUILD_ID .
            - docker push ${AWS_REGISTRY_URL}:$BUILD_ID
            - docker tag ${AWS_REGISTRY_URL}:$BUILD_ID ${AWS_REGISTRY_URL}:latest
            - docker push ${AWS_REGISTRY_URL}:latest
    - step:
              name: "Deploy to Dev Enviorment"
              trigger: automatic
              deployment: test
              script:
                - pipe: atlassian/aws-ecs-deploy:0.3.0
                  variables:
                    AWS_ACCESS_KEY_ID: '${AWS_ACCESS_KEY_ID}'
                    AWS_SECRET_ACCESS_KEY: '${AWS_SECRET_ACCESS_KEY}'
                    AWS_DEFAULT_REGION: '${AWS_DEFAULT_REGION}'
                    ECS_CLUSTER_NAME: 'IDG-Development'
                    ECS_SERVICE_NAME: 'picasso'
                    ECS_TASK_DEFINITION: 'task-def.json'
                    ECS_TASK_FAMILY_NAME: 'picasso' # Optional
    master:
      - step:
          image: node:10.15.0
          name: build dependencies and test
          caches:
            - node
          script: # Modify the commands below to build your repository.
            - npm install
            # - npm test --passWithNoTests
      - step:
          image: atlassian/pipelines-awscli:latest
          name: build and publish docker image.
          services:
            - docker # enable Docker for your repository
          script: # Modify the commands below to build your repository.
              # aws login
              - eval $(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)
              # docker
              - export BUILD_ID=$BITBUCKET_BRANCH_$BITBUCKET_COMMIT_$BITBUCKET_BUILD_NUMBER
              # - export IMAGE_NAME="${DOCKER_HUB_USERNAME}/${BITBUCKET_REPO_SLUG}:${BITBUCKET_BUILD_NUMBER}"
              - docker build -t ${AWS_REGISTRY_URL}:$BUILD_ID .
              - docker push ${AWS_REGISTRY_URL}:$BUILD_ID
              - docker tag ${AWS_REGISTRY_URL}:$BUILD_ID ${AWS_REGISTRY_URL}:latest
              - docker push ${AWS_REGISTRY_URL}:latest
      - step:
         name: "Deploy to Staging Enviorment"
         deployment: staging
         script:
           #- set +e  # turn off error-trapping
           - pipe: atlassian/aws-ecs-deploy:0.3.0
             variables:
               AWS_ACCESS_KEY_ID: '${AWS_ACCESS_KEY_ID}'
               AWS_SECRET_ACCESS_KEY: '${AWS_SECRET_ACCESS_KEY}'
               AWS_DEFAULT_REGION: '${AWS_DEFAULT_REGION}'
               ECS_CLUSTER_NAME: 'IDG-Staging'
               ECS_SERVICE_NAME: 'picasso'
               ECS_TASK_DEFINITION: 'task-def.json'
               ECS_TASK_FAMILY_NAME: 'picasso' # Optional
      - step:
          name: "Deploy to Prod Enviorment"
          trigger: manual
          deployment: production
          script:
          - pipe: atlassian/aws-ecs-deploy:0.3.0
            variables:
              AWS_ACCESS_KEY_ID: '${AWS_ACCESS_KEY_ID}'
              AWS_SECRET_ACCESS_KEY: '${AWS_SECRET_ACCESS_KEY}'
              AWS_DEFAULT_REGION: '${AWS_DEFAULT_REGION}'
              ECS_CLUSTER_NAME: 'IDG-Production'
              ECS_SERVICE_NAME: 'picasso'
              ECS_TASK_DEFINITION: 'task-def.json'
              ECS_TASK_FAMILY_NAME: 'picasso' # Optional
